// <auto-generated />
using System;
using Chat.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.DataAccess.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20210113213253_update-data")]
    partial class updatedata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 21,
                            Email = "lutfikotann@gmail.com",
                            PasswordHash = new byte[] { 183, 63, 97, 47, 77, 37, 46, 175, 179, 95, 221, 126, 159, 67, 129, 194, 93, 248, 195, 0, 56, 85, 64, 15, 119, 83, 14, 250, 164, 2, 193, 136, 21, 37, 144, 62, 252, 221, 62, 97, 7, 16, 38, 110, 61, 16, 160, 119, 190, 66, 18, 79, 101, 169, 72, 106, 114, 112, 162, 116, 187, 8, 178, 36 },
                            PasswordSalt = new byte[] { 239, 230, 135, 134, 67, 66, 151, 2, 193, 75, 219, 44, 236, 204, 122, 244, 139, 161, 129, 167, 196, 142, 7, 102, 248, 117, 229, 90, 201, 202, 23, 252, 180, 229, 152, 186, 89, 165, 8, 112, 55, 233, 158, 109, 17, 184, 130, 25, 107, 125, 158, 56, 180, 101, 133, 94, 244, 203, 89, 221, 10, 35, 232, 37, 213, 168, 61, 9, 79, 220, 38, 94, 52, 44, 17, 88, 48, 71, 247, 188, 98, 182, 206, 7, 72, 115, 125, 62, 200, 90, 0, 84, 138, 49, 126, 101, 54, 158, 193, 18, 26, 186, 113, 225, 48, 134, 50, 15, 157, 231, 148, 120, 206, 8, 182, 191, 112, 9, 81, 78, 198, 98, 32, 101, 16, 72, 96, 185 },
                            RefreshToken = "IODEWTLD3TLK6YLYUH8AZKTAMTJXHMAWXGRPKKK",
                            RefreshTokenExpiredDate = new DateTime(2021, 1, 13, 0, 32, 52, 936, DateTimeKind.Local).AddTicks(111),
                            UserName = "lKotan"
                        });
                });

            modelBuilder.Entity("Chat.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoomId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Chat.Entities.Account", b =>
                {
                    b.HasOne("Chat.Entities.Room", "Room")
                        .WithMany("Accounts")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Chat.Entities.Message", b =>
                {
                    b.HasOne("Chat.Entities.Account", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Chat.Entities.Room", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
